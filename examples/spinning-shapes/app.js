/*
 * Glue code for elm-gameroom test game
 * Autogenerated by ./scripts/examples.js. Do not modify!
 */

var localStorage = window.localStorage

var _subscribersByRoomId = {}

window.db = {
  /**
   * @param {string} roomId - Room id.
   * @return {Promise}
   */
  getRoom: function (roomId) {
    return Promise.resolve(JSON.parse(localStorage.getItem('/rooms/' + roomId)))
  },

  /**
   * @param {string} stringified room object.
   * @return {Promise}
   */
  setRoom: function (room) {
    localStorage.setItem('/rooms/' + room.id, JSON.stringify(room))
    return Promise.resolve(room)
  },

  /**
   * @param {string} roomId - Room id.
   * @param {function} onValue - Update callback.
   * @return {function} onValue
   */
  subscribeToRoom: function (roomId, onValue) {
    var previousValue
    _subscribersByRoomId[roomId] = {
      onValue: onValue,
      interval: window.setInterval(function () {
        var value = localStorage.getItem('/rooms/' + roomId)
        if (previousValue !== value) {
          onValue(JSON.parse(value))
        }
        previousValue = value
      }, 1000)
    }
    return onValue
  },

  /**
   * @param {string} roomId - Room id.
   */
  unsubscribeFromRoom: function (roomId) {
    window.clearInterval(_subscribersByRoomId[roomId].interval)
    _subscribersByRoomId[roomId] = null
  }
}

/**
 * This function handles communication between the Elm ports and the datastore.
 * @param {object} db - datastore API
 * @param {object} ports - Elm ports
 * @return {object} ports
 */
window.talkToPorts = function (db, ports) {
  // Subscribe to room, sending updates to the roomUpdated port
  ports.subscribeToRoom.subscribe(function (roomId) {
    db.subscribeToRoom(roomId, function (room) {
      ports.roomUpdated.send(JSON.stringify(room))
    })
  })

  // Unsubscribe from room, making sure port roomUpdated doesn't get any new values
  ports.unsubscribeFromRoom.subscribe(function (roomId) {
    db.unsubscribeFromRoom(roomId)
  })

  // Create new game room in storage, sending it back to the roomCreated port.
  ports.createRoom.subscribe(function (room) {
    db.setRoom(JSON.parse(room)).then(function () {
      ports.roomCreated.send(room)
    })
  })

  // Update room. If subscribed, this should signal back to the roomUpdated port.
  // Hence, no feedback is necessary in this method.
  ports.updateRoom.subscribe(function (room) {
    db.setRoom(JSON.parse(room))
  })

  return ports
}

